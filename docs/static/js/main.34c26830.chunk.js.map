{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","state","name","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","setState","useEffect","then","imgs","useFetchGifs","console","log","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"6MAoDeA,EAjDK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACNC,mBAAS,IADH,mBACnCC,EADmC,KACvBC,EADuB,KAiC1C,OACC,0BAAMC,SAdc,SAACC,GACrBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAE9BR,GAAc,SAACS,GAEd,MAAM,CAAEP,GAAR,mBAAuBO,OAExBN,EAAc,OAMd,2BACCO,KAAK,aACLC,KAAK,OACLC,MAAOV,EACPW,SA9BuB,SAACR,GAE1BF,EAAcE,EAAES,OAAOF,Y,uBCDVG,EAbF,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACTC,EADS,iDACuCC,UAAUH,GADjD,+DAEII,MAAMF,GAFV,cAETG,EAFS,gBAGQA,EAAKC,OAHb,uBAGPC,EAHO,EAGPA,KACFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC9B,MAAO,CACNC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QARrB,kBAWRM,GAXQ,4CAAH,sDCEAO,EAAc,SAAC,GAAkB,IAAjBH,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IACnC,OACC,yBAAKc,UAAU,0CACd,yBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,2BAAIA,KC0BQO,EA5BC,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECDN,SAACA,GAAc,IAAD,EACff,mBAAS,CAClCsB,KAAM,GACNa,SAAS,IAH+B,mBAClC3B,EADkC,KAC3B4B,EAD2B,KAYzC,OALAC,qBAAU,WACTvB,EAAQC,GAAUuB,MAAK,SAACC,GAAD,OACtBH,EAAS,CAAEd,KAAMiB,EAAMJ,SAAS,SAE/B,CAACpB,IACGP,EDV2BgC,CAAazB,GAAjCa,EADmB,EACzBN,KAAca,EADW,EACXA,QActB,OAXAM,QAAQC,IAAIP,GAYX,kBAAC,WAAD,KACC,wBAAIJ,UAAU,qCAAqChB,GAClDoB,GAAW,uBAAGJ,UAAU,oCAAb,WACZ,yBAAKA,UAAU,aACbH,EAAOJ,KAAI,SAACC,GAAD,OACX,kBAAC,EAAD,eAAakB,IAAKlB,EAAIC,IAAQD,UEUpBmB,EA/BM,WAAM,MAGU5C,mBAAS,CAAC,cAHpB,mBAGnB6C,EAHmB,KAGP9C,EAHO,KAY1B,OACC,kBAAC,WAAD,KACC,4CACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,6BACA,4BAKE8C,EAAWrB,KAAI,SAACT,GAAD,OACd,kBAAC,EAAD,CAAS4B,IAAK5B,EAAUA,SAAUA,UCrBxC+B,IAASC,OAAO,kBAAC,EAAD,MAAkBC,SAASC,eAAe,U","file":"static/js/main.34c26830.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst AddCategory = ({ setCategories }) => {\r\n\tconst [inputValue, setInputValue] = useState(\"\");\r\n\r\n\t/**\r\n\t * Función que se ejecuta cada vez que se realiza un cambio en el input y\r\n\t * actualiza el valor del inputValue mediante el hook\r\n\t * @param {*} e evento del input\r\n\t */\r\n\r\n\tconst handleInputChange = (e) => {\r\n\t\t// console.log(e.target.value);\r\n\t\tsetInputValue(e.target.value);\r\n\t};\r\n\r\n\t/**\r\n\t * Función que se ejecuta al enviar el formulario y actualiza el\r\n\t * listado de categorías.\r\n\t * @param {*} e evento del formulario\r\n\t */\r\n\r\n\tconst handleSubmit = (e) => {\r\n\t\te.preventDefault();\r\n\r\n\t\tif (inputValue.trim().length > 2) {\r\n\t\t\t// console.log(e.target.inputValue.value);\r\n\t\t\tsetCategories((state) => {\r\n\t\t\t\t// console.log(state);\r\n\t\t\t\treturn [inputValue, ...state];\r\n\t\t\t});\r\n\t\t\tsetInputValue(\"\");\r\n\t\t}\r\n\t};\r\n\r\n\treturn (\r\n\t\t<form onSubmit={handleSubmit}>\r\n\t\t\t<input\r\n\t\t\t\tname=\"inputValue\"\r\n\t\t\t\ttype=\"text\"\r\n\t\t\t\tvalue={inputValue}\r\n\t\t\t\tonChange={handleInputChange}\r\n\t\t\t/>\r\n\t\t</form>\r\n\t);\r\n};\r\n\r\nAddCategory.propTypes = {\r\n\tsetCategories: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default AddCategory;\r\n","const getGifs = async (category) => {\r\n\tconst url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=bvg9SK9DxVxC7lr5cR0rRoDqPEDbasWf`;\r\n\tconst resp = await fetch(url);\r\n\tconst { data } = await resp.json();\r\n\tconst gifs = data.map((img) => {\r\n\t\treturn {\r\n\t\t\tid: img.id,\r\n\t\t\ttitle: img.title,\r\n\t\t\turl: img.images?.downsized_medium.url,\r\n\t\t};\r\n\t});\r\n\treturn gifs;\r\n};\r\nexport default getGifs;","import React from 'react';\r\n\r\nexport const GifGridItem = ({title, url}) => {\r\n\treturn (\r\n\t\t<div className=\"card animate__animated animate__fadeIn\">\r\n\t\t\t<img src={url} alt={title}/>\r\n\t\t\t<p>{title}</p>\r\n\t\t</div>\r\n\t)\r\n}\r\n","import React, { Fragment } from \"react\";\r\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\r\nimport { GifGridItem } from \"./GifGridItem\";\r\n\r\nconst GifGrid = ({ category }) => {\r\n\tconst { data: images, loading } = useFetchGifs(category);\r\n\r\n\t// console.log(data);\r\n\tconsole.log(loading);\r\n\r\n\t// /**\r\n\t//  * Con el use effect ejecutamos la función dependiendo de la condición del segundo parámetro\r\n\t//  */\r\n\r\n\t/**\r\n\t * Si lo ponemos aquí cada vez que react detecte un cambio en cualquier estado\r\n\t * recargará el componente ejecutando la función cada vez\r\n\t */\r\n\t// getGifs();\r\n\treturn (\r\n\t\t<Fragment>\r\n\t\t\t<h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\r\n\t\t\t{loading && <p className=\"animate__animated animate__flash\">Loading</p>}\r\n\t\t\t<div className=\"card-grid\">\r\n\t\t\t\t{images.map((img) => (\r\n\t\t\t\t\t<GifGridItem key={img.id} {...img} />\r\n\t\t\t\t))}\r\n\t\t\t</div>\r\n\t\t</Fragment>\r\n\t);\r\n};\r\n\r\nexport default GifGrid;\r\n","import { useState, useEffect } from \"react\";\r\nimport getGifs from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = (category) => {\r\n\tconst [state, setState] = useState({\r\n\t\tdata: [],\r\n\t\tloading: true,\r\n\t});\r\n\r\n\t// Los efectos no pueden ser async\r\n\tuseEffect(() => {\r\n\t\tgetGifs(category).then((imgs) =>\r\n\t\t\tsetState({ data: imgs, loading: false })\r\n\t\t);\r\n\t}, [category]);\r\n\treturn state;\r\n};\r\n","import React, { Fragment, useState } from \"react\";\r\nimport AddCategory from \"./components/AddCategory\";\r\nimport GifGrid from \"./components/GifGrid\";\r\n\r\nconst GifExpertApp = () => {\r\n\t// const categories = [\"One Punch\", \"Samurai X\", \"Dragon Ball\"];\r\n\r\n\tconst [categories, setCategories] = useState([\"One Punch\"]);\r\n\r\n\t// const handleAdd = () => {\r\n\t// \t//setCategories([...categories, \"Nuevo\"]);\r\n\t// \tsetCategories((categorias) => {\r\n\t// \t\treturn [...categorias, \"Nuevo\"];\r\n\t// \t});\r\n\t// };\r\n\r\n\treturn (\r\n\t\t<Fragment>\r\n\t\t\t<h2>GifExpertApp</h2>\r\n\t\t\t<AddCategory setCategories={setCategories} />\r\n\t\t\t<hr />\r\n\t\t\t<ol>\r\n\t\t\t\t{\r\n\t\t\t\t\t/**\r\n\t\t\t\t\t * El map retorna dos elementos, uno el elemento del array y otro el indice\r\n\t\t\t\t\t */\r\n\t\t\t\t\tcategories.map((category) => (\r\n\t\t\t\t\t\t<GifGrid key={category} category={category}/>\r\n\t\t\t\t\t))\r\n\t\t\t\t}\r\n\t\t\t</ol>\r\n\t\t</Fragment>\r\n\t);\r\n};\r\n\r\nexport default GifExpertApp;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n\nimport GifExpertApp from './GifExpertApp';\n\nReactDOM.render(<GifExpertApp />, document.getElementById(\"root\"));\n"],"sourceRoot":""}